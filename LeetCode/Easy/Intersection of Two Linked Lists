
/*
Write a program to find the node at which the intersection of two singly linked lists begins.


For example, the following two linked lists:

A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:     b1 → b2 → b3
begin to intersect at node c1.


Notes:

If the two linked lists have no intersection at all, return null.
The linked lists must retain their original structure after the function returns.
You may assume there are no cycles anywhere in the entire linked structure.
Your code should preferably run in O(n) time and use only O(1) memory.
*/


/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */

/**
 * @param {ListNode} headA
 * @param {ListNode} headB
 * @return {ListNode}
 */
var getIntersectionNode = function(headA, headB) {
    var len1 = getLength(headA);
    var len2 = getLength(headB);; 
    var head1 = headA; var head2 = headB;
    var diff = len1 - len2;
    
    if(len1 === 0 || len2 === 0) {
        return null;
    }

    
    if(diff > 0) {
        while(diff) {
            head1 = head1.next;
            diff--;
        }
    } else {
        while(diff < 0) {
            head2 = head2.next;
            diff++;
        }
    }
    
    // now both pointers are at same lenght before end.
    
    
    while(head1) {
        // increase the pointer one by one and check the pointer value (head1 and 2 will point to the intersection address.)
        if(head1 === head2) {
            return head1;
        }
        head1 = head1.next;
        head2 = head2.next;
        
    }
    
    
    return null;
    
    function getLength(head){
        var newHead = head; // coping the reference
        var count = 0;
         while(newHead) {
             newHead = newHead.next;
            count++;
        }
        return count;
    }
};
