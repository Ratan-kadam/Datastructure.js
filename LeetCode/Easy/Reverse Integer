/*
Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers 
within the 32-bit signed integer range: [âˆ’231,  231 âˆ’ 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
*/

/**
 * @param {number} x
 * @return {number}
 */

var reverse = function(x) {
    var reverseNumber = 0;
    var negative = false;
    var maxLimit = Math.pow(2,31);
    
    if(x >= maxLimit) {
        return 0;
    }
    
    if(x < 0) {
        negative = true;
        x = Math.abs(x);
    }
    
    while(x > 0) {
        
        var newlastNumber = x % 10;
        x = Math.floor(x / 10); 
        reverseNumber = reverseNumber * 10 + newlastNumber;
    }
    
    
    if(reverseNumber > maxLimit) 
    {
        return 0;
    }
        
        
    return negative ? -1 * reverseNumber : reverseNumber;
    
};
