/*
Given two strings A and B, find the minimum number of times A has to be repeated such that B is a substring of it. If no such solution, return -1.

For example, with A = "abcd" and B = "cdabcdab".

Return 3, because by repeating A three times (“abcdabcdabcd”), B is a substring of it; and B is not a substring of A repeated two times ("abcdabcd").

Note:
The length of A and B will be between 1 and 10000.
*/


/**
 * @param {string} A
 * @param {string} B
 * @return {number}
 */
 
var repeatedStringMatch = function(A, B) {
    var  bStringLength = B.length;
    var newString = A;
    var count = 1; 
    
    while(newString.length < bStringLength) {
        newString = newString + A;
        count++;
        // end of this loop atlest A and B will have same lenght.
    }
    
    if(newString.indexOf(B) > -1) {
        return count;
    } else {
        count++;
        newString = newString + A; // if greater than substring it should atleast match once.
    }
    
     return newString.indexOf(B) > -1 ? count : -1;
    
};
